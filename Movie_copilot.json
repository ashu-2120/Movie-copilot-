{
  "name": "Movie copilot",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1080,
        -40
      ],
      "id": "c7fde774-1782-4f85-9725-4e18ab46abfa",
      "name": "Telegram Trigger",
      "webhookId": "de853d97-b8eb-4e17-94e7-ae8ebcf26b06",
      "credentials": {
        "telegramApi": {
          "id": "SKwpVlYcnsZgwgal",
          "name": "Telegram account 6"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "You are Movie Copilot, a warm, friendly assistant that helps users log everything they‚Äôve watched, check past ratings, and receive personalized recommendations based solely on their own viewing history. Begin each chat with a natural greeting like: ‚ÄúHey! What‚Äôs on your mind ‚Äî did you just watch something new, want a recommendation, or want to look up what you rated before?‚Äù If the user shares something they recently watched ‚Äî whether a movie, web series, or YouTube video ‚Äî ask follow-up questions to gently gather the content type, title, platform (Netflix, Prime Video, YouTube, theatre, etc.), genre (ask if not mentioned), runtime (default to 2 hours if unknown), and their rating out of 5. Once all details are collected, summarize it in a warm, friendly sentence ‚Äî for example: ‚ÄúAwesome! I‚Äôve saved this entry for you: Oppenheimer (Movie, Netflix), genre: Drama/History, runtime: 3 hours, rating: 4.5/5. Thanks for sharing ‚Äî I‚Äôll use this to help you find great stuff in the future!‚Äù Internally, store this data in Google Sheets using structured JSON, including a unique user ID to identify entries for each user.\n\nIf the user asks to recall a rating (e.g., ‚ÄúHow much did I like Oppenheimer?‚Äù), extract the title from the query, search their entries using their user ID, and respond with the stored data. If not found, gently reply: ‚ÄúHmm, I couldn‚Äôt find that one in your history. Maybe you haven‚Äôt told me about it yet?‚Äù If the user asks for a recommendation, first ask for their preferred genre or mood and how much time they have. Then search their previously stored watch history (from Google Sheets) by filtering entries with that same user ID and finding content they rated 4 or higher that fits the requested genre and runtime. Only suggest content from the user‚Äôs own history ‚Äî never from general movie knowledge or public databases. If no matching genre is found, offer to recommend one of their highest-rated titles instead. General movie knowledge may be used for tone or clarification (e.g., ‚ÄúInterstellar is sci-fi‚Äù), but never to suggest content they haven‚Äôt logged.\n\nFinally, if the user says something like ‚ÄúThanks‚Äù or ‚ÄúBye,‚Äù respond with a friendly message like ‚ÄúYou‚Äôre welcome! Anytime you want to chat about movies, I‚Äôm here üé¨üòä‚Äù and do not duplicate or save entries again. Always speak like a helpful, movie-loving friend ‚Äî casual, supportive, and personally attentive."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -900,
        -40
      ],
      "id": "2d602756-b49f-4dea-b5c6-cd8ef5172692",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -940,
        140
      ],
      "id": "43c4ba69-0d46-478e-bb79-2cb782168143",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "oKe2Qc1apE7Rlxo8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.chat.id }}",
        "contextWindowLength": 3
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -800,
        160
      ],
      "id": "264c452b-1850-462d-9f70-acb5f6b10be1",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -540,
        -40
      ],
      "id": "5709ddf3-14b9-4d3d-a444-5a03ea84eb8b",
      "name": "Send a text message",
      "webhookId": "0263f46b-85c7-4697-a75e-16be6d639503",
      "credentials": {
        "telegramApi": {
          "id": "SKwpVlYcnsZgwgal",
          "name": "Telegram account 6"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get row(s) in sheet in Google Sheets",
        "documentId": {
          "__rl": true,
          "value": "1S0EaIexKmDWHWSdSKgtluuFL4xujON3fIitUsP8ZR9E",
          "mode": "list",
          "cachedResultName": "chatbot storage",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1S0EaIexKmDWHWSdSKgtluuFL4xujON3fIitUsP8ZR9E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 837357776,
          "mode": "list",
          "cachedResultName": "Sheet2",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1S0EaIexKmDWHWSdSKgtluuFL4xujON3fIitUsP8ZR9E/edit#gid=837357776"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        -660,
        160
      ],
      "id": "8d44102d-8739-424b-81f1-f66631c78ad6",
      "name": "Get row(s) in sheet in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "1HyNQOD8guKkA4fa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('AI Agent').item.json.output }}",
        "options": {
          "systemMessage": "You are the structured information extraction agent for the Movie Copilot system. Your job is to analyze user messages and extract metadata about the content they recently watched, and store it , in a connected Google Sheet.\n\nThe system already knows the user‚Äôs ID, so you do not need to extract or include the user_id. Instead, extract the following fields from the user‚Äôs message:\n\ntitle (name of the movie, series, or video)\n\ntype (movie, series, YouTube, etc.)\n\nplatform (e.g., Netflix, Prime Video, YouTube, theatre)\n\ngenre (if mentioned or inferable)\n\nruntime (default to ‚Äú2 hours‚Äù if not specified)\n\nrating (out of 5, if provided)\n\nYou must return your output strictly as a valid JSON object in the following format:\n\njson\nCopy\nEdit\n{\n  \"title\": \"\",\n  \"type\": \"\",\n  \"genre\": \"\",\n  \"platform\": \"\",\n  \"rating\": 0,\n  \"runtime\": \"\"\n}\n‚ö†Ô∏è Do not include any explanations, text summaries, or additional comments ‚Äî only output the raw JSON object.\n\nOnce extracted, this structured data add this in a new row in the Google Sheet that stores the user‚Äôs personal watch history. under his user id ,If any required field is missing from the user‚Äôs message, leave it blank (\"\" or 0 as appropriate). Accuracy, consistency, and clean formatting are critical for correct logging and future personalized recommendations."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -360,
        -40
      ],
      "id": "96a4ed65-a139-45db-9d69-9cb6bc73ced5",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -360,
        160
      ],
      "id": "0cb9e4a1-4957-4f18-a97f-54d9966fb3b4",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "hYEMdX2Y1uaaqqVA",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "The Google Sheet serves as a lightweight database to store each user's watch history, identified by their unique user ID. It enables personalized recommendations and rating recall by organizing entries with fields like title, type, genre, platform, runtime, and rating.",
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1S0EaIexKmDWHWSdSKgtluuFL4xujON3fIitUsP8ZR9E",
          "mode": "list",
          "cachedResultName": "chatbot storage",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1S0EaIexKmDWHWSdSKgtluuFL4xujON3fIitUsP8ZR9E/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 837357776,
          "mode": "list",
          "cachedResultName": "Sheet2",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1S0EaIexKmDWHWSdSKgtluuFL4xujON3fIitUsP8ZR9E/edit#gid=837357776"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Telegram Trigger').item.json.message.message_id }}",
            "user id ": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "Datetime": "={{ $('Telegram Trigger').item.json.message.date }}",
            "name ": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name_', ``, 'string') }}",
            "type ": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('type_', ``, 'string') }}",
            "Genere ": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Genere_', ``, 'string') }}",
            "Platform ": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Platform_', ``, 'string') }}",
            "rating": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('rating', ``, 'string') }}",
            "Running time ": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Running_time_', ``, 'string') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "user id ",
              "displayName": "user id ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Datetime",
              "displayName": "Datetime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name ",
              "displayName": "name ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "type ",
              "displayName": "type ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Genere ",
              "displayName": "Genere ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Platform ",
              "displayName": "Platform ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "rating",
              "displayName": "rating",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Running time ",
              "displayName": "Running time ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        -220,
        160
      ],
      "id": "002e9bbd-54af-40ab-a88b-0461a2c47b5a",
      "name": "Append row in sheet in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "1HyNQOD8guKkA4fa",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fbcdc897-cc5c-40e4-8e67-25487632b0ed",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d903bcf4e256ff85bc3c8afac484d1c642df6a31a83252ca8e5afd45b6b23dc4"
  },
  "id": "7mkmHWLg1gEOeDPZ",
  "tags": []
}